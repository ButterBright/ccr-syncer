// Code generated by MockGen. DO NOT EDIT.
// Source: ccr/base/ispec.go
//
// Generated by this command:
//
//	mockgen -source=ccr/base/ispec.go -destination=ccr/spec_mock.go -package=ccr
//
// Package ccr is a generated GoMock package.
package ccr

import (
	sql "database/sql"
	reflect "reflect"

	base "github.com/selectdb/ccr_syncer/ccr/base"
	utils "github.com/selectdb/ccr_syncer/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockISpec is a mock of ISpec interface.
type MockISpec struct {
	ctrl     *gomock.Controller
	recorder *MockISpecMockRecorder
}

// MockISpecMockRecorder is the mock recorder for MockISpec.
type MockISpecMockRecorder struct {
	mock *MockISpec
}

// NewMockISpec creates a new mock instance.
func NewMockISpec(ctrl *gomock.Controller) *MockISpec {
	mock := &MockISpec{ctrl: ctrl}
	mock.recorder = &MockISpecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISpec) EXPECT() *MockISpecMockRecorder {
	return m.recorder
}

// CheckDatabaseExists mocks base method.
func (m *MockISpec) CheckDatabaseExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDatabaseExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDatabaseExists indicates an expected call of CheckDatabaseExists.
func (mr *MockISpecMockRecorder) CheckDatabaseExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDatabaseExists", reflect.TypeOf((*MockISpec)(nil).CheckDatabaseExists))
}

// CheckRestoreFinished mocks base method.
func (m *MockISpec) CheckRestoreFinished(snapshotName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRestoreFinished", snapshotName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRestoreFinished indicates an expected call of CheckRestoreFinished.
func (mr *MockISpecMockRecorder) CheckRestoreFinished(snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRestoreFinished", reflect.TypeOf((*MockISpec)(nil).CheckRestoreFinished), snapshotName)
}

// CheckTableExists mocks base method.
func (m *MockISpec) CheckTableExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTableExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTableExists indicates an expected call of CheckTableExists.
func (mr *MockISpecMockRecorder) CheckTableExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTableExists", reflect.TypeOf((*MockISpec)(nil).CheckTableExists))
}

// ClearDB mocks base method.
func (m *MockISpec) ClearDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDB indicates an expected call of ClearDB.
func (mr *MockISpecMockRecorder) ClearDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDB", reflect.TypeOf((*MockISpec)(nil).ClearDB))
}

// Connect mocks base method.
func (m *MockISpec) Connect() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockISpecMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockISpec)(nil).Connect))
}

// ConnectDB mocks base method.
func (m *MockISpec) ConnectDB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDB indicates an expected call of ConnectDB.
func (mr *MockISpecMockRecorder) ConnectDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDB", reflect.TypeOf((*MockISpec)(nil).ConnectDB))
}

// CreateDatabase mocks base method.
func (m *MockISpec) CreateDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockISpecMockRecorder) CreateDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockISpec)(nil).CreateDatabase))
}

// CreateSnapshotAndWaitForDone mocks base method.
func (m *MockISpec) CreateSnapshotAndWaitForDone(tables []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotAndWaitForDone", tables)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotAndWaitForDone indicates an expected call of CreateSnapshotAndWaitForDone.
func (mr *MockISpecMockRecorder) CreateSnapshotAndWaitForDone(tables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotAndWaitForDone", reflect.TypeOf((*MockISpec)(nil).CreateSnapshotAndWaitForDone), tables)
}

// CreateTable mocks base method.
func (m *MockISpec) CreateTable(stmt string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", stmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockISpecMockRecorder) CreateTable(stmt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockISpec)(nil).CreateTable), stmt)
}

// DbExec mocks base method.
func (m *MockISpec) DbExec(sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbExec", sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// DbExec indicates an expected call of DbExec.
func (mr *MockISpecMockRecorder) DbExec(sql any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbExec", reflect.TypeOf((*MockISpec)(nil).DbExec), sql)
}

// DropTable mocks base method.
func (m *MockISpec) DropTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable.
func (mr *MockISpecMockRecorder) DropTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockISpec)(nil).DropTable))
}

// DropTables mocks base method.
func (m *MockISpec) DropTables(tables []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropTables", tables)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropTables indicates an expected call of DropTables.
func (mr *MockISpecMockRecorder) DropTables(tables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTables", reflect.TypeOf((*MockISpec)(nil).DropTables), tables)
}

// Exec mocks base method.
func (m *MockISpec) Exec(sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockISpecMockRecorder) Exec(sql any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockISpec)(nil).Exec), sql)
}

// GetAllTables mocks base method.
func (m *MockISpec) GetAllTables() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTables")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTables indicates an expected call of GetAllTables.
func (mr *MockISpecMockRecorder) GetAllTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTables", reflect.TypeOf((*MockISpec)(nil).GetAllTables))
}

// IsDatabaseEnableBinlog mocks base method.
func (m *MockISpec) IsDatabaseEnableBinlog() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDatabaseEnableBinlog")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDatabaseEnableBinlog indicates an expected call of IsDatabaseEnableBinlog.
func (mr *MockISpecMockRecorder) IsDatabaseEnableBinlog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDatabaseEnableBinlog", reflect.TypeOf((*MockISpec)(nil).IsDatabaseEnableBinlog))
}

// IsTableEnableBinlog mocks base method.
func (m *MockISpec) IsTableEnableBinlog() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableEnableBinlog")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTableEnableBinlog indicates an expected call of IsTableEnableBinlog.
func (mr *MockISpecMockRecorder) IsTableEnableBinlog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableEnableBinlog", reflect.TypeOf((*MockISpec)(nil).IsTableEnableBinlog))
}

// Notify mocks base method.
func (m *MockISpec) Notify(arg0 base.SpecEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", arg0)
}

// Notify indicates an expected call of Notify.
func (mr *MockISpecMockRecorder) Notify(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockISpec)(nil).Notify), arg0)
}

// Register mocks base method.
func (m *MockISpec) Register(arg0 utils.Observer[base.SpecEvent]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register.
func (mr *MockISpecMockRecorder) Register(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockISpec)(nil).Register), arg0)
}

// Unregister mocks base method.
func (m *MockISpec) Unregister(arg0 utils.Observer[base.SpecEvent]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", arg0)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockISpecMockRecorder) Unregister(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockISpec)(nil).Unregister), arg0)
}

// Valid mocks base method.
func (m *MockISpec) Valid() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid")
	ret0, _ := ret[0].(error)
	return ret0
}

// Valid indicates an expected call of Valid.
func (mr *MockISpecMockRecorder) Valid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockISpec)(nil).Valid))
}
