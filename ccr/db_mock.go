// Code generated by MockGen. DO NOT EDIT.
// Source: storage/db.go

// Package ccr is a generated GoMock package.
package ccr

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AddJob mocks base method.
func (m *MockDB) AddJob(jobName, jobInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", jobName, jobInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJob indicates an expected call of AddJob.
func (mr *MockDBMockRecorder) AddJob(jobName, jobInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockDB)(nil).AddJob), jobName, jobInfo)
}

// GetAllJobs mocks base method.
func (m *MockDB) GetAllJobs() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockDBMockRecorder) GetAllJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockDB)(nil).GetAllJobs))
}

// GetProgress mocks base method.
func (m *MockDB) GetProgress(jobName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgress", jobName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgress indicates an expected call of GetProgress.
func (mr *MockDBMockRecorder) GetProgress(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*MockDB)(nil).GetProgress), jobName)
}

// IsJobExist mocks base method.
func (m *MockDB) IsJobExist(jobName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJobExist", jobName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJobExist indicates an expected call of IsJobExist.
func (mr *MockDBMockRecorder) IsJobExist(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJobExist", reflect.TypeOf((*MockDB)(nil).IsJobExist), jobName)
}

// IsProgressExist mocks base method.
func (m *MockDB) IsProgressExist(jobName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProgressExist", jobName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProgressExist indicates an expected call of IsProgressExist.
func (mr *MockDBMockRecorder) IsProgressExist(jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProgressExist", reflect.TypeOf((*MockDB)(nil).IsProgressExist), jobName)
}

// UpdateJob mocks base method.
func (m *MockDB) UpdateJob(jobName, jobInfo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", jobName, jobInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockDBMockRecorder) UpdateJob(jobName, jobInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockDB)(nil).UpdateJob), jobName, jobInfo)
}

// UpdateProgress mocks base method.
func (m *MockDB) UpdateProgress(jobName, progress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgress", jobName, progress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgress indicates an expected call of UpdateProgress.
func (mr *MockDBMockRecorder) UpdateProgress(jobName, progress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgress", reflect.TypeOf((*MockDB)(nil).UpdateProgress), jobName, progress)
}
