// Code generated by MockGen. DO NOT EDIT.
// Source: ccr/meta.go

// Package ccr is a generated GoMock package.
package ccr

import (
	reflect "reflect"

	base "github.com/selectdb/ccr_syncer/ccr/base"
	btree "github.com/tidwall/btree"
	gomock "go.uber.org/mock/gomock"
)

// MockIMeta is a mock of IMeta interface.
type MockIMeta struct {
	ctrl     *gomock.Controller
	recorder *MockIMetaMockRecorder
}

// MockIMetaMockRecorder is the mock recorder for MockIMeta.
type MockIMetaMockRecorder struct {
	mock *MockIMeta
}

// NewMockIMeta creates a new mock instance.
func NewMockIMeta(ctrl *gomock.Controller) *MockIMeta {
	mock := &MockIMeta{ctrl: ctrl}
	mock.recorder = &MockIMetaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMeta) EXPECT() *MockIMetaMockRecorder {
	return m.recorder
}

// CheckBinlogFeature mocks base method.
func (m *MockIMeta) CheckBinlogFeature() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBinlogFeature")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckBinlogFeature indicates an expected call of CheckBinlogFeature.
func (mr *MockIMetaMockRecorder) CheckBinlogFeature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBinlogFeature", reflect.TypeOf((*MockIMeta)(nil).CheckBinlogFeature))
}

// DirtyGetTables mocks base method.
func (m *MockIMeta) DirtyGetTables() map[int64]*TableMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirtyGetTables")
	ret0, _ := ret[0].(map[int64]*TableMeta)
	return ret0
}

// DirtyGetTables indicates an expected call of DirtyGetTables.
func (mr *MockIMetaMockRecorder) DirtyGetTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirtyGetTables", reflect.TypeOf((*MockIMeta)(nil).DirtyGetTables))
}

// GetBackendId mocks base method.
func (m *MockIMeta) GetBackendId(host, portStr string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendId", host, portStr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendId indicates an expected call of GetBackendId.
func (mr *MockIMetaMockRecorder) GetBackendId(host, portStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendId", reflect.TypeOf((*MockIMeta)(nil).GetBackendId), host, portStr)
}

// GetBackendMap mocks base method.
func (m *MockIMeta) GetBackendMap() (map[int64]*base.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendMap")
	ret0, _ := ret[0].(map[int64]*base.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendMap indicates an expected call of GetBackendMap.
func (mr *MockIMetaMockRecorder) GetBackendMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendMap", reflect.TypeOf((*MockIMeta)(nil).GetBackendMap))
}

// GetBackends mocks base method.
func (m *MockIMeta) GetBackends() ([]*base.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackends")
	ret0, _ := ret[0].([]*base.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackends indicates an expected call of GetBackends.
func (mr *MockIMetaMockRecorder) GetBackends() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackends", reflect.TypeOf((*MockIMeta)(nil).GetBackends))
}

// GetDbId mocks base method.
func (m *MockIMeta) GetDbId() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbId")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDbId indicates an expected call of GetDbId.
func (mr *MockIMetaMockRecorder) GetDbId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbId", reflect.TypeOf((*MockIMeta)(nil).GetDbId))
}

// GetFullTableName mocks base method.
func (m *MockIMeta) GetFullTableName(tableName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullTableName", tableName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFullTableName indicates an expected call of GetFullTableName.
func (mr *MockIMetaMockRecorder) GetFullTableName(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullTableName", reflect.TypeOf((*MockIMeta)(nil).GetFullTableName), tableName)
}

// GetIndexes mocks base method.
func (m *MockIMeta) GetIndexes(tableId, partitionId int64) (map[int64]*IndexMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexes", tableId, partitionId)
	ret0, _ := ret[0].(map[int64]*IndexMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexes indicates an expected call of GetIndexes.
func (mr *MockIMetaMockRecorder) GetIndexes(tableId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexes", reflect.TypeOf((*MockIMeta)(nil).GetIndexes), tableId, partitionId)
}

// GetMasterToken mocks base method.
func (m *MockIMeta) GetMasterToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterToken indicates an expected call of GetMasterToken.
func (mr *MockIMetaMockRecorder) GetMasterToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterToken", reflect.TypeOf((*MockIMeta)(nil).GetMasterToken))
}

// GetPartitionIdByName mocks base method.
func (m *MockIMeta) GetPartitionIdByName(tableId int64, partitionName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionIdByName", tableId, partitionName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionIdByName indicates an expected call of GetPartitionIdByName.
func (mr *MockIMetaMockRecorder) GetPartitionIdByName(tableId, partitionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionIdByName", reflect.TypeOf((*MockIMeta)(nil).GetPartitionIdByName), tableId, partitionName)
}

// GetPartitionIdByRange mocks base method.
func (m *MockIMeta) GetPartitionIdByRange(tableId int64, partitionRange string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionIdByRange", tableId, partitionRange)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionIdByRange indicates an expected call of GetPartitionIdByRange.
func (mr *MockIMetaMockRecorder) GetPartitionIdByRange(tableId, partitionRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionIdByRange", reflect.TypeOf((*MockIMeta)(nil).GetPartitionIdByRange), tableId, partitionRange)
}

// GetPartitionIds mocks base method.
func (m *MockIMeta) GetPartitionIds(tableName string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionIds", tableName)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionIds indicates an expected call of GetPartitionIds.
func (mr *MockIMetaMockRecorder) GetPartitionIds(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionIds", reflect.TypeOf((*MockIMeta)(nil).GetPartitionIds), tableName)
}

// GetPartitionName mocks base method.
func (m *MockIMeta) GetPartitionName(tableId, partitionId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionName", tableId, partitionId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionName indicates an expected call of GetPartitionName.
func (mr *MockIMetaMockRecorder) GetPartitionName(tableId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionName", reflect.TypeOf((*MockIMeta)(nil).GetPartitionName), tableId, partitionId)
}

// GetPartitionRange mocks base method.
func (m *MockIMeta) GetPartitionRange(tableId, partitionId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionRange", tableId, partitionId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionRange indicates an expected call of GetPartitionRange.
func (mr *MockIMetaMockRecorder) GetPartitionRange(tableId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionRange", reflect.TypeOf((*MockIMeta)(nil).GetPartitionRange), tableId, partitionId)
}

// GetPartitions mocks base method.
func (m *MockIMeta) GetPartitions(tableId int64) (map[int64]*PartitionMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitions", tableId)
	ret0, _ := ret[0].(map[int64]*PartitionMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitions indicates an expected call of GetPartitions.
func (mr *MockIMetaMockRecorder) GetPartitions(tableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitions", reflect.TypeOf((*MockIMeta)(nil).GetPartitions), tableId)
}

// GetReplicas mocks base method.
func (m *MockIMeta) GetReplicas(tableId, partitionId int64) (*btree.Map[int64, *ReplicaMeta], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicas", tableId, partitionId)
	ret0, _ := ret[0].(*btree.Map[int64, *ReplicaMeta])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicas indicates an expected call of GetReplicas.
func (mr *MockIMetaMockRecorder) GetReplicas(tableId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicas", reflect.TypeOf((*MockIMeta)(nil).GetReplicas), tableId, partitionId)
}

// GetTable mocks base method.
func (m *MockIMeta) GetTable(tableId int64) (*TableMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", tableId)
	ret0, _ := ret[0].(*TableMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable.
func (mr *MockIMetaMockRecorder) GetTable(tableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockIMeta)(nil).GetTable), tableId)
}

// GetTableId mocks base method.
func (m *MockIMeta) GetTableId(tableName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableId", tableName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableId indicates an expected call of GetTableId.
func (mr *MockIMetaMockRecorder) GetTableId(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableId", reflect.TypeOf((*MockIMeta)(nil).GetTableId), tableName)
}

// GetTableNameById mocks base method.
func (m *MockIMeta) GetTableNameById(tableId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableNameById", tableId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableNameById indicates an expected call of GetTableNameById.
func (mr *MockIMetaMockRecorder) GetTableNameById(tableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableNameById", reflect.TypeOf((*MockIMeta)(nil).GetTableNameById), tableId)
}

// GetTables mocks base method.
func (m *MockIMeta) GetTables() (map[int64]*TableMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables")
	ret0, _ := ret[0].(map[int64]*TableMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockIMetaMockRecorder) GetTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockIMeta)(nil).GetTables))
}

// GetTabletList mocks base method.
func (m *MockIMeta) GetTabletList(tableId, partitionId int64) ([]*TabletMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTabletList", tableId, partitionId)
	ret0, _ := ret[0].([]*TabletMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTabletList indicates an expected call of GetTabletList.
func (mr *MockIMetaMockRecorder) GetTabletList(tableId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTabletList", reflect.TypeOf((*MockIMeta)(nil).GetTabletList), tableId, partitionId)
}

// GetTablets mocks base method.
func (m *MockIMeta) GetTablets(tableId, partitionId int64) (*btree.Map[int64, *TabletMeta], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTablets", tableId, partitionId)
	ret0, _ := ret[0].(*btree.Map[int64, *TabletMeta])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTablets indicates an expected call of GetTablets.
func (mr *MockIMetaMockRecorder) GetTablets(tableId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTablets", reflect.TypeOf((*MockIMeta)(nil).GetTablets), tableId, partitionId)
}

// UpdateBackends mocks base method.
func (m *MockIMeta) UpdateBackends() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackends")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBackends indicates an expected call of UpdateBackends.
func (mr *MockIMetaMockRecorder) UpdateBackends() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackends", reflect.TypeOf((*MockIMeta)(nil).UpdateBackends))
}

// UpdateIndexes mocks base method.
func (m *MockIMeta) UpdateIndexes(tableId, partitionId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndexes", tableId, partitionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIndexes indicates an expected call of UpdateIndexes.
func (mr *MockIMetaMockRecorder) UpdateIndexes(tableId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndexes", reflect.TypeOf((*MockIMeta)(nil).UpdateIndexes), tableId, partitionId)
}

// UpdatePartitions mocks base method.
func (m *MockIMeta) UpdatePartitions(tableId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartitions", tableId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePartitions indicates an expected call of UpdatePartitions.
func (mr *MockIMetaMockRecorder) UpdatePartitions(tableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartitions", reflect.TypeOf((*MockIMeta)(nil).UpdatePartitions), tableId)
}

// UpdateReplicas mocks base method.
func (m *MockIMeta) UpdateReplicas(tableId, partitionId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicas", tableId, partitionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplicas indicates an expected call of UpdateReplicas.
func (mr *MockIMetaMockRecorder) UpdateReplicas(tableId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicas", reflect.TypeOf((*MockIMeta)(nil).UpdateReplicas), tableId, partitionId)
}

// UpdateTable mocks base method.
func (m *MockIMeta) UpdateTable(tableName string, tableId int64) (*TableMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTable", tableName, tableId)
	ret0, _ := ret[0].(*TableMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTable indicates an expected call of UpdateTable.
func (mr *MockIMetaMockRecorder) UpdateTable(tableName, tableId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockIMeta)(nil).UpdateTable), tableName, tableId)
}

// UpdateToken mocks base method.
func (m *MockIMeta) UpdateToken() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockIMetaMockRecorder) UpdateToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockIMeta)(nil).UpdateToken))
}
