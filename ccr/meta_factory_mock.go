// Code generated by MockGen. DO NOT EDIT.
// Source: ccr/meta_factory.go

// Package ccr is a generated GoMock package.
package ccr

import (
	reflect "reflect"

	base "github.com/selectdb/ccr_syncer/ccr/base"
	gomock "go.uber.org/mock/gomock"
)

// MockIMetaFactory is a mock of IMetaFactory interface.
type MockIMetaFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIMetaFactoryMockRecorder
}

// MockIMetaFactoryMockRecorder is the mock recorder for MockIMetaFactory.
type MockIMetaFactoryMockRecorder struct {
	mock *MockIMetaFactory
}

// NewMockIMetaFactory creates a new mock instance.
func NewMockIMetaFactory(ctrl *gomock.Controller) *MockIMetaFactory {
	mock := &MockIMetaFactory{ctrl: ctrl}
	mock.recorder = &MockIMetaFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetaFactory) EXPECT() *MockIMetaFactoryMockRecorder {
	return m.recorder
}

// NewMeta mocks base method.
func (m *MockIMetaFactory) NewMeta(tableSpec *base.Spec) Metaer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMeta", tableSpec)
	ret0, _ := ret[0].(Metaer)
	return ret0
}

// NewMeta indicates an expected call of NewMeta.
func (mr *MockIMetaFactoryMockRecorder) NewMeta(tableSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMeta", reflect.TypeOf((*MockIMetaFactory)(nil).NewMeta), tableSpec)
}
